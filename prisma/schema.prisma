// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- bestehende Modelle ---

model User {
  id                      String      @id @default(cuid())
  username                String      @unique
  email                   String      @unique
  password_hash           String
  first_name              String?
  last_name               String?
  phone                   String?
  status                  UserStatus  @default(ACTIVE)
  email_verified          Boolean     @default(false)
  email_verification_token String?
  password_reset_token    String?
  password_reset_expires  DateTime?
  last_login              DateTime?
  created_at              DateTime    @default(now())
  updated_at              DateTime    @updatedAt
  orders                  Order[]
  pterodactyl_user        PterodactylUser?
  user_servers            UserServer[]
  role                    UserRole    @default(USER)
  wallet                  UserWallet?
  wallet_transactions     WalletTransaction[]
  topup_requests          TopupRequest[]
  card_transactions       CardTransaction[]
}

model Service {
  id                String    @id @default(cuid())
  name              String
  short_description String?
  description       String?
  cpu_type          String?
  status            ServiceStatus @default(ACTIVE)
  sort_order        Int           @default(0)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  packages          Package[]
  orders            Order[]
}

model Package {
  id                          String    @id @default(cuid())
  service_id                  String
  name                        String
  configuration               Json
  firewall_type               String?
  complimentary_gifts         Json?
  base_price                  Decimal
  first_time_discount_percent Decimal   @default(0)
  status                      ServiceStatus @default(ACTIVE)
  sort_order                  Int           @default(0)
  created_at                  DateTime      @default(now())
  updated_at                  DateTime      @updatedAt
  service                     Service       @relation(fields: [service_id], references: [id], onDelete: Cascade)
  orders                      Order[]
}

model Order {
  id              String          @id @default(cuid())
  user_id         String
  service_id      String
  package_id      String
  order_number    String          @unique
  billing_cycle   BillingCycle
  base_amount     Decimal
  discount_amount Decimal?        @default(0)
  coupon_code     String?
  final_amount    Decimal
  payment_method  PaymentMethod?
  status          OrderStatus     @default(PENDING)
  payment_status  PaymentStatus   @default(PENDING)
  notes           String?
  admin_notes     String?
  expires_at      DateTime?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  user            User            @relation(fields: [user_id], references: [id])
  service         Service         @relation(fields: [service_id], references: [id])
  package         Package         @relation(fields: [package_id], references: [id])
  user_servers    UserServer[]
}

model PterodactylUser {
  id                    String   @id @default(cuid())
  user_id               String   @unique
  pterodactyl_user_id   Int
  pterodactyl_username  String
  pterodactyl_email     String
  pterodactyl_password  String? // Encrypted
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserServer {
  id                    String        @id @default(cuid())
  user_id               String
  order_id              String
  pterodactyl_server_id Int
  server_name           String
  server_ip             String?
  server_port           Int?
  status                ServerStatus  @default(ACTIVE)
  expires_at            DateTime
  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
  user                  User          @relation(fields: [user_id], references: [id])
  order                 Order         @relation(fields: [order_id], references: [id])

  @@index([user_id])
  @@index([expires_at])
}

// --- neue Modelle ---

model UserWallet {
  id            String   @id @default(cuid())
  user_id       String   @unique
  balance       Decimal  @default(0.00)
  total_topup   Decimal  @default(0.00)
  total_spent   Decimal  @default(0.00)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model WalletTransaction {
  id              String                  @id @default(cuid())
  user_id         String
  type            WalletTransactionType
  amount          Decimal
  balance_before  Decimal
  balance_after   Decimal
  description     String?
  reference_type  ReferenceType?
  reference_id    String?
  admin_id        String?
  status          TransactionStatus       @default(COMPLETED)
  metadata        Json?
  created_at      DateTime                @default(now())
  user            User                    @relation(fields: [user_id], references: [id])

  @@index([user_id, type])
  @@index([reference_type, reference_id])
  @@index([created_at])
}

model TopupRequest {
  id                  String             @id @default(cuid())
  user_id             String
  method              TopupMethod
  requested_amount    Decimal
  actual_amount       Decimal?
  status              TopupStatus        @default(PENDING)
  card_telco          CardTelco?
  card_amount         Decimal?
  card_serial         String?
  card_pin            String?
  exchange_rate       Decimal?
  bank_account_name   String?
  bank_account_number String?
  bank_name           String?
  transfer_code       String?
  processed_by        String?
  admin_notes         String?
  api_response        Json?
  processed_at        DateTime?
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  user                User               @relation(fields: [user_id], references: [id])
  card_transactions   CardTransaction[]

  @@index([user_id, status])
  @@index([method, status])
  @@index([transfer_code])
}

model CardTransaction {
  id                 String      @id @default(cuid())
  topup_request_id   String
  user_id            String
  telco              CardTelco
  card_amount        Decimal
  received_amount    Decimal
  exchange_rate      Decimal
  serial             String
  pin                String
  api_provider       String?
  api_transaction_id String?
  api_response       Json?
  status             CardTransactionStatus @default(PENDING)
  processed_at       DateTime?
  created_at         DateTime              @default(now())
  topup_request      TopupRequest          @relation(fields: [topup_request_id], references: [id])
  user               User                  @relation(fields: [user_id], references: [id])

  @@index([serial, pin])
  @@index([status])
  @@index([api_transaction_id])
}

model ExchangeRate {
  id           String      @id @default(cuid())
  telco        CardTelco
  card_amount  Decimal
  exchange_rate Decimal
  status       ServiceStatus @default(ACTIVE)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@unique([telco, card_amount])
}

model PaymentMethodConfig {
  id            String        @id @default(cuid())
  method_type   PaymentMethod
  method_name   String
  status        PaymentMethodStatus @default(ACTIVE)
  configuration Json?
  sort_order    Int                 @default(0)
  created_at    DateTime            @default(now())
  updated_at    DateTime            @updatedAt
}

// --- Enums ---

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

enum UserRole {
  USER
  ADMIN
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
}

enum PaymentMethod {
  WALLET
  PHONE_CARD
  BANK_TRANSFER
  ONLINE_GATEWAY
}

enum ServerStatus {
  ACTIVE
  SUSPENDED
  TERMINATED
}

enum WalletTransactionType {
  TOPUP
  PURCHASE
  REFUND
  ADMIN_ADD
  ADMIN_SUBTRACT
  BONUS
}

enum ReferenceType {
  ORDER
  TOPUP_REQUEST
  ADMIN_ACTION
  REFUND
  CARD_TRANSACTION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TopupMethod {
  CARD
  BANK_TRANSFER
  ONLINE_GATEWAY
}

enum TopupStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum CardTelco {
  VIETTEL
  MOBIFONE
  VINAPHONE
}

enum CardTransactionStatus {
  PENDING
  SUCCESS
  FAILED
  INVALID_CARD
}

enum PaymentMethodStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}
