// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- Existing Models ---

model User {
  id                      String      @id @default(cuid())
  username                String?     @unique // Made optional if 'name' is for display
  email                   String      @unique
  password_hash           String?
  first_name              String?
  last_name               String?
  name                    String? // Added for OAuth display name
  avatar                  String? // Added for OAuth avatar URL
  provider                String? // Added for OAuth provider (e.g., 'discord', 'google')
  providerId              String? // Added for OAuth provider's unique ID
  phone                   String?
  status                  UserStatus  @default(ACTIVE)
  email_verified          Boolean     @default(false)
  email_verification_token String?
  password_reset_token    String?
  password_reset_expires  DateTime?
  last_login              DateTime?
  created_at              DateTime    @default(now())
  updated_at              DateTime    @updatedAt
  orders                  Order[]
  pterodactyl_user        PterodactylUser?
  user_servers            UserServer[]
  role                    UserRole    @default(USER)
  wallet                  UserWallet?
  wallet_transactions     WalletTransaction[]
  topup_requests          TopupRequest[]
  card_transactions       CardTransaction[]
  tickets_created         Ticket[]      @relation("UserTickets")
  tickets_assigned        Ticket[]      @relation("AssignedAdminTickets")
  ticket_messages         TicketMessage[]
  ticket_attachments      TicketAttachment[]
  ticket_ratings_given    TicketRating[] @relation("UserTicketRatings")
  ticket_ratings_received TicketRating[] @relation("TicketRatingAdmin")
  response_templates      ResponseTemplate[]
  ticket_escalations_from TicketEscalation[] @relation("EscalatedFromAdmin")
  ticket_escalations_to   TicketEscalation[] @relation("EscalatedToAdmin")
  refreshTokens           RefreshToken[] // Added relationship to RefreshToken

  @@unique([provider, providerId]) // Added compound unique constraint for OAuth
}

model RefreshToken {
  id        String    @id @default(cuid())
  token     String    @unique
  user_id   String // Changed from userId to user_id for consistency
  issued_at DateTime  @default(now()) // Changed from issuedAt
  expires_at DateTime  // Changed from expiresAt
  revoked_at DateTime?
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([token])
}

model Service {
  id                String    @id @default(cuid())
  name              String
  short_description String?
  description       String?
  cpu_type          String?
  status            ServiceStatus @default(ACTIVE)
  sort_order        Int           @default(0)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  packages          Package[]
  orders            Order[]
}

model Package {
  id                          String    @id @default(cuid())
  service_id                  String
  name                        String
  configuration               Json
  firewall_type               String?
  complimentary_gifts         Json?
  base_price                  Decimal
  first_time_discount_percent Decimal   @default(0)
  status                      ServiceStatus @default(ACTIVE)
  sort_order                  Int           @default(0)
  created_at                  DateTime      @default(now())
  updated_at                  DateTime      @updatedAt
  service                     Service       @relation(fields: [service_id], references: [id], onDelete: Cascade)
  orders                      Order[]
}

model Order {
  id              String          @id @default(cuid())
  user_id         String
  service_id      String
  package_id      String
  order_number    String          @unique
  billing_cycle   BillingCycle
  base_amount     Decimal
  discount_amount Decimal?        @default(0)
  coupon_code     String?
  final_amount    Decimal
  payment_method  PaymentMethod?
  status          OrderStatus     @default(PENDING)
  payment_status  PaymentStatus   @default(PENDING)
  notes           String?
  admin_notes     String?
  expires_at      DateTime?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  user            User            @relation(fields: [user_id], references: [id])
  service         Service         @relation(fields: [service_id], references: [id])
  package         Package         @relation(fields: [package_id], references: [id])
  user_servers    UserServer[]
}

model PterodactylUser {
  id                    String   @id @default(cuid())
  user_id               String   @unique
  pterodactyl_user_id   Int
  pterodactyl_username  String
  pterodactyl_email     String
  pterodactyl_password  String? // Encrypted
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  user                  User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserServer {
  id                    String        @id @default(cuid())
  user_id               String
  order_id              String
  pterodactyl_server_id Int
  server_name           String
  server_ip             String?
  server_port           Int?
  status                ServerStatus  @default(ACTIVE)
  expires_at            DateTime
  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
  user                  User          @relation(fields: [user_id], references: [id])
  order                 Order         @relation(fields: [order_id], references: [id])

  @@index([user_id])
  @@index([expires_at])
}

model UserWallet {
  id            String   @id @default(cuid())
  user_id       String   @unique
  balance       Decimal  @default(0.00)
  total_topup   Decimal  @default(0.00)
  total_spent   Decimal  @default(0.00)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model WalletTransaction {
  id              String                  @id @default(cuid())
  user_id         String
  type            WalletTransactionType
  amount          Decimal
  balance_before  Decimal
  balance_after   Decimal
  description     String?
  reference_type  ReferenceType?
  reference_id    String?
  admin_id        String?
  status          TransactionStatus       @default(COMPLETED)
  metadata        Json?
  created_at      DateTime                @default(now())
  user            User                    @relation(fields: [user_id], references: [id])

  @@index([user_id, type])
  @@index([reference_type, reference_id])
  @@index([created_at])
}

model TopupRequest {
  id                  String             @id @default(cuid())
  user_id             String
  method              TopupMethod
  requested_amount    Decimal
  actual_amount       Decimal?
  status              TopupStatus        @default(PENDING)
  card_telco          CardTelco?
  card_amount         Decimal?
  card_serial         String?
  card_pin            String?
  exchange_rate       Decimal?
  bank_account_name   String?
  bank_account_number String?
  bank_name           String?
  transfer_code       String?
  processed_by        String?
  admin_notes         String?
  api_response        Json?
  processed_at        DateTime?
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  user                User               @relation(fields: [user_id], references: [id])
  card_transactions   CardTransaction[]

  @@index([user_id, status])
  @@index([method, status])
  @@index([transfer_code])
}

model CardTransaction {
  id                 String      @id @default(cuid())
  topup_request_id   String
  user_id            String
  telco              CardTelco
  card_amount        Decimal
  received_amount    Decimal
  exchange_rate      Decimal
  serial             String
  pin                String
  api_provider       String?
  api_transaction_id String?
  api_response       Json?
  status             CardTransactionStatus @default(PENDING)
  processed_at       DateTime?
  created_at         DateTime              @default(now())
  topup_request      TopupRequest          @relation(fields: [topup_request_id], references: [id])
  user               User                  @relation(fields: [user_id], references: [id])

  @@index([serial, pin])
  @@index([status])
  @@index([api_transaction_id])
}

model ExchangeRate {
  id           String      @id @default(cuid())
  telco        CardTelco
  card_amount  Decimal
  exchange_rate Decimal
  status       ServiceStatus @default(ACTIVE)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@unique([telco, card_amount])
}

model PaymentMethodConfig {
  id            String        @id @default(cuid())
  method_type   PaymentMethod
  method_name   String
  status        PaymentMethodStatus @default(ACTIVE)
  configuration Json?
  sort_order    Int                 @default(0)
  created_at    DateTime            @default(now())
  updated_at    DateTime            @updatedAt
}

// --- New Models (Ticket System) ---

model TicketCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  icon        String?
  sort_order  Int      @default(0)
  status      CategoryStatus @default(ACTIVE)
  created_at  DateTime @default(now())
  tickets     Ticket[]
  response_templates ResponseTemplate[]
}

model Ticket {
  id                         String         @id @default(cuid())
  ticket_number              String         @unique
  user_id                    String
  category_id                String
  title                      String
  description                String
  priority                   TicketPriority @default(NORMAL)
  status                     TicketStatus   @default(OPEN)
  assigned_admin_id          String?
  assigned_at                DateTime?
  first_response_at          DateTime?
  last_activity_at           DateTime?
  resolved_at                DateTime?
  closed_at                  DateTime?
  tags                       Json?
  attachments_data           Json? // Using a different name to avoid conflict with relation
  internal_notes             String?
  resolution_summary         String?
  sla_first_response_due     DateTime?
  sla_resolution_due         DateTime?
  sla_first_response_breached Boolean @default(false)
  sla_resolution_breached    Boolean @default(false)
  created_at                 DateTime       @default(now())
  updated_at                 DateTime       @updatedAt
  
  user                       User           @relation("UserTickets", fields: [user_id], references: [id])
  category                   TicketCategory @relation(fields: [category_id], references: [id])
  assigned_admin             User?          @relation("AssignedAdminTickets", fields: [assigned_admin_id], references: [id])
  messages                   TicketMessage[]
  attachments                TicketAttachment[]
  rating                     TicketRating?
  escalations                TicketEscalation[]

  @@index([user_id])
  @@index([status, priority])
  @@index([assigned_admin_id])
  @@index([category_id, status])
  @@index([created_at])
  @@index([ticket_number])
}

model TicketMessage {
  id             String       @id @default(cuid())
  ticket_id      String
  user_id        String
  message        String
  message_type   MessageType  @default(MESSAGE)
  is_admin_reply Boolean      @default(false)
  is_internal    Boolean      @default(false)
  attachments_data Json? // Using a different name to avoid conflict with relation
  metadata       Json?
  edited_at      DateTime?
  deleted_at     DateTime?
  read_at        DateTime?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  ticket         Ticket       @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [user_id], references: [id])
  attachments    TicketAttachment[]

  @@index([ticket_id])
  @@index([user_id])
  @@index([created_at])
  @@index([message_type])
}

model TicketAttachment {
  id               String   @id @default(cuid())
  ticket_id        String?
  message_id       String?
  user_id          String
  original_filename String
  stored_filename  String
  file_path        String
  file_size        Int
  file_type        String
  mime_type        String
  download_count   Int      @default(0)
  created_at       DateTime @default(now())

  ticket           Ticket?  @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  message          TicketMessage? @relation(fields: [message_id], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [user_id], references: [id])

  @@index([ticket_id])
  @@index([message_id])
}

model TicketRating {
  id                           String   @id @default(cuid())
  ticket_id                    String   @unique
  user_id                      String
  admin_id                     String?
  rating                       Int
  feedback                     String?
  response_time_rating         Int?
  solution_quality_rating      Int?
  admin_professionalism_rating Int?
  would_recommend              Boolean?
  allow_public_display         Boolean  @default(false)
  created_at                   DateTime @default(now())

  ticket                       Ticket   @relation(fields: [ticket_id], references: [id])
  user                         User     @relation("UserTicketRatings", fields: [user_id], references: [id])
  admin                        User?    @relation(name: "TicketRatingAdmin", fields: [admin_id], references: [id])
}

model ResponseTemplate {
  id          String   @id @default(cuid())
  admin_id    String
  title       String
  content     String
  category_id String?
  tags        Json?
  usage_count Int      @default(0)
  is_public   Boolean  @default(false)
  status      TemplateStatus @default(ACTIVE)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  admin       User     @relation(fields: [admin_id], references: [id])
  category    TicketCategory? @relation(fields: [category_id], references: [id])

  @@index([admin_id])
  @@index([category_id])
}

model SLAPolicy {
  id                  String         @id @default(cuid())
  name                String
  description         String?
  priority_level      TicketPriority @unique
  first_response_time Int
  resolution_time     Int
  escalation_time     Int?
  business_hours_only Boolean        @default(true)
  status              PolicyStatus   @default(ACTIVE)
  created_at          DateTime       @default(now())
}

model TicketEscalation {
  id                 String   @id @default(cuid())
  ticket_id          String
  escalated_from_id  String?
  escalated_to_id    String
  escalation_reason  EscalationReason
  escalation_notes   String?
  created_at         DateTime @default(now())

  ticket             Ticket   @relation(fields: [ticket_id], references: [id])
  escalated_from     User?    @relation("EscalatedFromAdmin", fields: [escalated_from_id], references: [id])
  escalated_to       User     @relation("EscalatedToAdmin", fields: [escalated_to_id], references: [id])

  @@index([ticket_id])
  @@index([escalated_to_id])
}

// --- Existing Enums ---

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

enum UserRole {
  USER
  ADMIN
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
}

enum PaymentMethod {
  WALLET
  PHONE_CARD
  BANK_TRANSFER
  ONLINE_GATEWAY
}

enum ServerStatus {
  ACTIVE
  SUSPENDED
  TERMINATED
}

enum WalletTransactionType {
  TOPUP
  PURCHASE
  REFUND
  ADMIN_ADD
  ADMIN_SUBTRACT
  BONUS
}

enum ReferenceType {
  ORDER
  TOPUP_REQUEST
  ADMIN_ACTION
  REFUND
  CARD_TRANSACTION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TopupMethod {
  CARD
  BANK_TRANSFER
  ONLINE_GATEWAY
}

enum TopupStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum CardTelco {
  VIETTEL
  MOBIFONE
  VINAPHONE
}

enum CardTransactionStatus {
  PENDING
  SUCCESS
  FAILED
  INVALID_CARD
}

enum PaymentMethodStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

// --- New Enums (Ticket System) ---

enum CategoryStatus {
  ACTIVE
  INACTIVE
}

enum TicketPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_USER
  WAITING_ADMIN
  RESOLVED
  CLOSED
}

enum MessageType {
  MESSAGE
  STATUS_CHANGE
  ASSIGNMENT
  INTERNAL_NOTE
}

enum TemplateStatus {
  ACTIVE
  ARCHIVED
}

enum PolicyStatus {
  ACTIVE
  INACTIVE
}

enum EscalationReason {
  SLA_BREACH
  COMPLEXITY
  MANUAL
  USER_REQUEST
}
